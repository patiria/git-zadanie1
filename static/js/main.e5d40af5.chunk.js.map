{"version":3,"sources":["CryptoList.js","CryptoRate.js","App.js","serviceWorker.js","index.js"],"names":["CryptoList","react_default","a","createElement","this","props","rates","map","rate","key","currency","className","class","last","symbol","Component","CryptoRate","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","axios","get","then","response","data","oldData","state","currentRates","keys","forEach","newCurrency","oldCurrency","find","cur","undefined","push","console","log","setState","catch","error","onFilter","event","value","target","length","trim","toUpperCase","filter","includes","inputValue","_this2","setInterval","type","onChange","src_CryptoList","App","src_CryptoRate","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAmBeA,mLAdP,OACGC,EAAAC,EAAAC,cAAA,UACKC,KAAKC,MAAMC,MAAMC,IAAI,SAAAC,GAAI,OACxBP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,EAAKE,UAAd,kBACiBT,EAAAC,EAAAC,cAAA,QAAMQ,UAAWH,EAAKI,OAAQJ,EAAKK,MADpD,OAEAZ,EAAAC,EAAAC,cAAA,cAASK,EAAKE,SAAd,SAAgCF,EAAKM,OAArC,gBARQC,aC8FVC,cA1Fb,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAY,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlB,KAAMC,KAmBRkB,QAAU,WACRC,IAAMC,IAAI,qCACPC,KAAK,SAAAC,GACJ,IAAIC,EAAOD,EAASC,KACdC,EAAUZ,EAAKa,MAAMC,aACvBA,EAAe,GAEnBb,OAAOc,KAAKJ,GAAMK,QAAQ,SAAAvB,GACxB,IAAIwB,EAAc,CAChBxB,SAAUA,EACVG,KAAMe,EAAKlB,GAAUG,KACrBC,OAAQc,EAAKlB,GAAUI,OACvBF,MAAO,QAIHuB,EAAcN,EAAQO,KAAK,SAAAC,GAAG,OAAIA,EAAI3B,WAAawB,EAAYxB,gBAGjD4B,IAAhBH,IACED,EAAYrB,KAAOsB,EAAYtB,KACjCqB,EAAYtB,MAAQ,QACXsB,EAAYrB,KAAOsB,EAAYtB,OACxCqB,EAAYtB,MAAQ,QAKxBmB,EAAaQ,KAAKL,KAEpBM,QAAQC,IAAIV,GACdd,EAAKyB,SAAS,CAAEX,aAAcA,MAE7BY,MAAM,SAAUC,GAEfJ,QAAQC,IAAIG,MAvDC3B,EA4DrB4B,SAAW,SAACC,GACV,IAAIC,EAAQD,EAAME,OAAOD,MAEJ,IAAjBA,EAAME,QACRhC,EAAKM,UAGPwB,EAAQA,EAAMG,OAAOC,cAErB,IAAIpB,EAAed,EAAKa,MAAMC,aAC9BA,EAAeA,EAAaqB,OAAO,SAAA5C,GACjC,OAAOA,EAAKE,SAAS2C,SAASN,KAGhC9B,EAAKyB,SAAS,CAAEY,WAAYP,EAAOhB,kBAvEjCd,EAAKa,MAAQ,CACXwB,WAAY,GACZvB,aAAc,IALCd,mFAUC,IAAAsC,EAAAnD,KAClBA,KAAKmB,UAELiC,YAAY,WACqB,KAA1BD,EAAKzB,MAAMwB,YACdC,EAAKhC,WAEN,sCA8DH,OACEtB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,UACbV,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAOsD,KAAK,OAAOV,MAAO3C,KAAK0B,MAAMwB,WAAYI,SAAUtD,KAAKyC,WAChE5C,EAAAC,EAAAC,cAACwD,EAAD,CAAYrD,MAAOF,KAAK0B,MAAMC,uBArFbhB,aCUV6C,MATf,WACE,OACE3D,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACdV,EAAAC,EAAAC,cAAC0D,EAAD,QCIeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.e5d40af5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass CryptoList extends Component {\r\n\r\n    render() {\r\n        return (\r\n           <ul>\r\n               {this.props.rates.map(rate =>\r\n                 <li key={rate.currency}>\r\n                 Last rate: &nbsp;<span className={rate.class}>{rate.last}</span>&nbsp;\r\n                 <strong>{rate.currency}&nbsp; [{rate.symbol}]</strong>\r\n                </li>)}\r\n           </ul>\r\n              \r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CryptoList;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport CryptoList from './CryptoList';\r\n\r\nclass CryptoRate extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      inputValue: '',\r\n      currentRates: []\r\n      \r\n    }\r\n  }\r\n   \r\n  componentDidMount() {\r\n    this.getData();\r\n\r\n    setInterval(() => {\r\n       if (this.state.inputValue === '') {\r\n        this.getData();\r\n       }\r\n    }, 5000);\r\n  }\r\n\r\n  getData = () => {\r\n    axios.get('https://blockchain.info/pl/ticker')\r\n      .then(response => {\r\n        let data = response.data;\r\n        const oldData = this.state.currentRates;\r\n        let currentRates = [];\r\n\r\n        Object.keys(data).forEach(currency => {\r\n          let newCurrency = {\r\n            currency: currency,\r\n            last: data[currency].last,\r\n            symbol: data[currency].symbol,\r\n            class: 'blue'\r\n          };\r\n\r\n\r\n          const oldCurrency = oldData.find(cur => cur.currency === newCurrency.currency);\r\n          //skrocona wersja zamiast if else\r\n\r\n          if (oldCurrency !== undefined) {\r\n            if (newCurrency.last > oldCurrency.last) {\r\n              newCurrency.class = 'green';\r\n            } else if (newCurrency.last < oldCurrency.last) {\r\n              newCurrency.class = 'red'\r\n                   \r\n            }\r\n          }\r\n\r\n          currentRates.push(newCurrency);\r\n        })\r\n        console.log(currentRates);\r\n      this.setState({ currentRates: currentRates });\r\n      })\r\n      .catch(function (error) {\r\n        // handle error\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n  \r\nonFilter = (event) => {\r\n  let value = event.target.value;\r\n\r\n  if (value.length === 0) {\r\n    this.getData();\r\n  }\r\n\r\n  value = value.trim().toUpperCase();\r\n\r\n  let currentRates = this.state.currentRates;\r\n  currentRates = currentRates.filter(rate => {\r\n    return rate.currency.includes(value);\r\n  });\r\n\r\n  this.setState({ inputValue: value, currentRates });\r\n}\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"crypto\">\r\n        <h1>Crypto rate</h1>\r\n        <input type=\"text\" value={this.state.inputValue} onChange={this.onFilter} />\r\n        <CryptoList rates={this.state.currentRates} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default CryptoRate;","import React from 'react';\nimport './App.css';\nimport CryptoRate from './CryptoRate';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <CryptoRate /> \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}